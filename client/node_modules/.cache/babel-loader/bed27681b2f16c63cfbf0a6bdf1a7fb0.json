{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [imgArr, setImgArr] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n  }, []); //----- POST data to DB\n  // set current title state when typing to input\n\n  function inputTitle(event) {\n    event.preventDefault();\n    setTitle(event.target.value);\n  } // push img Src and Title to imgArr state when POST is clicked\n\n\n  useEffect(() => {\n    const dataURI = canvasRef.current.toDataURL();\n    setImgArr(item => {\n      return [...item, {\n        src: dataURI,\n        title: title,\n        id: imgArr.length\n      }];\n    });\n    console.log('post clicked ');\n  }, [props.onPostClick]); //----- POST data to DB end ----- // \n  // ------- DRAW \n  // draw when moving mouse if draw = true\n\n  function handleMouseMove(e) {\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n  } // begin path / start drawing\n\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 20; // get background color and set brush color\n\n    const appDiv = document.querySelector(\"body\");\n    const appStyle = getComputedStyle(appDiv);\n    const color = appStyle.backgroundColor;\n    ctx.current.strokeStyle = color;\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop);\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath();\n  } //clear function\n\n\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415);\n  } // ------- DRAW end ----- // \n  // ------- TIMER \n  // Reset if reset/start is clicked in parent.\n\n\n  useEffect(() => {\n    handleClear();\n\n    if (props.ifStart === \"reset\") {\n      setDrawing(true);\n    } else {\n      setDrawing(false);\n    }\n  }, [props.ifStart]); // Stop when time is 0\n\n  useEffect(() => {\n    if (props.ifFinished) {\n      setDrawing(false);\n    }\n  }, [props.ifFinished]); // ------- TIMER end ----- // \n\n  return React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, props.ifFinished ? React.createElement(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    placeholder: \"TITLE\",\n    autoComplete: \"off\",\n    onChange: inputTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }) : null, React.createElement(\"div\", {\n    className: \"canvas__rect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 415,\n    height: 415 // onMouseDown={startDrawing}\n    // onMouseUp={stopDrawing}\n    ,\n    onMouseOver: startDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"canvasImgArray\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, props.allImg.slice(1)));\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","Canvas","props","drawing","setDrawing","imgArr","setImgArr","title","setTitle","canvasRef","ctx","current","getContext","inputTitle","event","preventDefault","target","value","dataURI","toDataURL","item","src","id","length","console","log","onPostClick","handleMouseMove","e","coords","clientX","offsetLeft","pageY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","appDiv","document","querySelector","appStyle","getComputedStyle","color","backgroundColor","strokeStyle","beginPath","moveTo","stopDrawing","closePath","handleClear","clearRect","ifStart","ifFinished","allImg","slice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [imgArr, setImgArr] = useState([])\n  const [title, setTitle] = useState(\"\")\n\n  const canvasRef = useRef()\n  const ctx = useRef()\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')   \n  }, [])\n\n  \n  //----- POST data to DB\n  // set current title state when typing to input\n  function inputTitle(event){\n    event.preventDefault()\n      setTitle(event.target.value)\n    }\n\n  // push img Src and Title to imgArr state when POST is clicked\n  useEffect(()=>{\n    const dataURI = canvasRef.current.toDataURL();\n    setImgArr(item =>  { return[...item, { src: dataURI, title: title, id: imgArr.length }] }  )\n    console.log('post clicked ')\n  },[props.onPostClick] )\n    \n  //----- POST data to DB end ----- // \n\n\n // ------- DRAW \n\n  // draw when moving mouse if draw = true\n  function handleMouseMove(e) {\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n  }\n // begin path / start drawing\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 20\n        // get background color and set brush color\n        const appDiv = document.querySelector(\"body\")\n        const appStyle = getComputedStyle(appDiv)\n        const color = appStyle.backgroundColor    \n    ctx.current.strokeStyle = color\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    )\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath()\n  }\n\n  //clear function\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415)\n }\n// ------- DRAW end ----- // \n\n // ------- TIMER \n  // Reset if reset/start is clicked in parent.\n  useEffect(() => {\n    handleClear()\n    if(props.ifStart === \"reset\"){\n      setDrawing(true)\n    } else {\n      setDrawing(false)\n    }\n  }, [props.ifStart])\n\n  // Stop when time is 0\n  useEffect(() => {\n    if(props.ifFinished){\n      setDrawing(false)\n    } \n  }, [props.ifFinished])\n   // ------- TIMER end ----- // \n\n  return (\n    <div className =\"canvas\">\n      {props.ifFinished ? \n        <input \n          type=\"text\" \n          name=\"title\" \n          placeholder =\"TITLE\" \n          autoComplete=\"off\"  \n          onChange={inputTitle} \n        /> \n      : null}\n\n      <div className =\"canvas__rect\">\n        <canvas\n        ref={canvasRef}\n        width={415}\n        height={415}\n        // onMouseDown={startDrawing}\n        // onMouseUp={stopDrawing}\n        onMouseOver={startDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n        />\n      </div>\n           <div className =\"canvasImgArray\">\n                {props.allImg.slice(1)}\n            </div>   \n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}