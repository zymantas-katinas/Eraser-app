{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n    ctx.current.fillStyle = \"#17252A\";\n    ctx.current.fillRect(0, 0, 400, 400);\n    ctx.current.strokeStyle = \"#3AAFA9\";\n    ctx.current.lineWidth = 20;\n    ctx.current.strokeRect(0, 0, 400, 400);\n  }, []);\n\n  function distanceBetween(point1, point2) {\n    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n  }\n\n  function angleBetween(point1, point2) {\n    return Math.atan2(point2.x - point1.x, point2.y - point1.y);\n  }\n\n  var isDrawing, lastPoint;\n\n  function handleMouseMove(e) {\n    // // actual coordinates\n    // const coords = [\n    //   e.clientX - canvasRef.current.offsetLeft,\n    //   e.pageY - canvasRef.current.offsetTop\n    // ]\n    // if (drawing) { \n    // ctx.current.lineTo(...coords)\n    // ctx.current.stroke()\n    var currentPoint = {\n      x: e.clientX,\n      y: e.pageY\n    };\n    var dist = distanceBetween(lastPoint, currentPoint);\n    var angle = angleBetween(lastPoint, currentPoint);\n\n    for (var i = 0; i < dist; i += 3) {\n      let x = lastPoint.x + Math.sin(angle) * i - 25;\n      let y = lastPoint.y + Math.cos(angle) * i - 25;\n      ctx.current.arc(x + 10, y + 10, 20, false, Math.PI * 2, false);\n      ctx.current.beginPath();\n      ctx.current.closePath();\n      ctx.current.fill();\n      ctx.current.stroke();\n    }\n\n    if (props.handleMouseMove) {\n      props.handleMouseMove(...coords);\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 20;\n    ctx.current.strokeStyle = \"#3AAFA9\";\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop);\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath(); // setDrawing(false)\n  }\n\n  function handleClick() {\n    setDrawing(true);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 400,\n    height: 400,\n    onMouseDown: startDrawing,\n    onMouseOver: startDrawing // onMouseUp={stopDrawing}\n    ,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    onClick: handleClick // onMouseMove = {handleClick}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }));\n} // -----------------------------------------------------\n// import React, { useState, useEffect, useRef } from 'react'\n// export default function Canvas(props) {\n//   const [drawing, setDrawing] = useState(false)\n//   const canvasRef = useRef()\n//   const ctx = useRef()\n//   useEffect(() => {\n//     ctx.current = canvasRef.current.getContext('2d')\n//     ctx.current.fillStyle = \"#17252A\"\n//     ctx.current.fillRect(0, 0, 400, 400)\n//     ctx.current.strokeStyle = \"#3AAFA9\"\n//     ctx.current.lineWidth = 20\n//     ctx.current.strokeRect(0, 0, 400, 400)\n//   }, [])\n// function distanceBetween(point1, point2) {\n//   return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n// }\n// function angleBetween(point1, point2) {\n//   return Math.atan2( point2.x - point1.x, point2.y - point1.y );\n// }\n// //ctx.fillStyle = \"rgba('255, 0, 0, 0.1')\";\n// // ctx.fillStyle = \"red\";\n// // ctx.strokeStyle = \"red\";\n// // ctx.globalAlpha = \"0.01\";\n// // ctx.lineWidth = 0;\n// // ctx.globalCompositeOperation = \"source-over\"; \n// var isDrawing, lastPoint;\n// function startDrawing(e) {\n//   isDrawing = true;\n//   lastPoint = { x: e.clientX, y: e.clientY };\n// };\n// function handleMouseMove(e) {\n//   if (!isDrawing) return;\n//   var currentPoint = { x: e.clientX, y: e.clientY };\n//   var dist = distanceBetween(lastPoint, currentPoint);\n//   var angle = angleBetween(lastPoint, currentPoint);\n//   for (var i = 0; i < dist; i+=3) {\n//     x = lastPoint.x + (Math.sin(angle) * i) - 25;\n//     y = lastPoint.y + (Math.cos(angle) * i) - 25;\n//     ctx.beginPath();\n//     ctx.arc(x+10, y+10, 20, false, Math.PI * 2, false);\n//     ctx.closePath();\n//     ctx.fill();\n//     ctx.stroke();\n//   }\n//   lastPoint = currentPoint;\n// };\n// el.onmouseup = function() {\n//   isDrawing = false;\n// };\n// =----------------------------------------\n// import React, {useRef, useState, useEffect} from 'react'\n// // define brush\n// const HOOK_SVG =\n//   'm129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0'\n// const HOOK_PATH = new Path2D(HOOK_SVG)\n// const SCALE = 0.1\n// const OFFSET = 80\n// function draw(ctx, location) {\n//   ctx.fillStyle = 'deepskyblue'\n//   ctx.shadowColor = 'dodgerblue'\n//   ctx.shadowBlur = 20\n//   ctx.save()\n//   ctx.scale(SCALE, SCALE)\n//   ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET)\n//   ctx.fill(HOOK_PATH)\n//   ctx.restore()\n// }\n// function App() {\n//   const canvasRef = useRef(null)\n//   // const [locations, setLocations] = useState([])\n//   // take last drawing from local storage\n//   const [locations, setLocations] = React.useState(\n//     JSON.parse(localStorage.getItem('draw-app')) || []\n//   )\n//   // mount canvas, draw initial drawing\n//   useEffect(() => {\n//     const canvas = canvasRef.current\n//     const ctx = canvas.getContext('2d')\n//     // ctx.clearRect(0, 0, window.innerHeight, window.innerWidth)\n//     // locations.forEach(location => draw(ctx, location))\n//     ctx.fillRect(0, 0, 400, 400)\n//   })\n//   // put last drawing into local storage\n//   useEffect(() => {\n//     localStorage.setItem('draw-app', JSON.stringify(locations))\n//   })\n//   // click canvas to draw\n//   function handleCanvasClick(e) {\n//     const newLocation = { x: e.clientX, y: e.clientY }\n//     setLocations([...locations, newLocation])\n//   }\n//   function handleClear() {\n//     setLocations([])\n//   }\n//   function handleUndo(){\n//     setLocations(locations.slice(0, -1))\n//   }\n//   return (\n//     <div>\n//       <button onClick={handleClear}>Clear</button>\n//       <button onClick={handleUndo}>Undo</button>\n//       <div className = \"canvas\">\n//         <canvas\n//           ref={canvasRef}\n//           width={400}\n//           height={400}\n//           // onClick={handleCanvasClick}\n//           onClick={handleCanvasClick}\n//         />\n//       </div>\n//     </div>\n//   )\n// }\n// export default App","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","Canvas","props","drawing","setDrawing","canvasRef","ctx","current","getContext","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","distanceBetween","point1","point2","Math","sqrt","pow","x","y","angleBetween","atan2","isDrawing","lastPoint","handleMouseMove","e","currentPoint","clientX","pageY","dist","angle","i","sin","cos","arc","PI","beginPath","closePath","fill","stroke","coords","startDrawing","lineJoin","lineCap","moveTo","offsetLeft","offsetTop","stopDrawing","handleClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  \n  const canvasRef = useRef()\n  const ctx = useRef()\n  \n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n\n    ctx.current.fillStyle = \"#17252A\"\n    ctx.current.fillRect(0, 0, 400, 400)\n\n    ctx.current.strokeStyle = \"#3AAFA9\"\n    ctx.current.lineWidth = 20\n    ctx.current.strokeRect(0, 0, 400, 400)\n  }, [])\n  \n  function distanceBetween(point1, point2) {\n    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n  }\n  function angleBetween(point1, point2) {\n    return Math.atan2( point2.x - point1.x, point2.y - point1.y );\n  }\n\n  var isDrawing, lastPoint;\n  function handleMouseMove(e) {\n    // // actual coordinates\n    // const coords = [\n    //   e.clientX - canvasRef.current.offsetLeft,\n    //   e.pageY - canvasRef.current.offsetTop\n    // ]\n    // if (drawing) { \n      // ctx.current.lineTo(...coords)\n      // ctx.current.stroke()\n      var currentPoint = { x: e.clientX, y: e.pageY };\n      var dist = distanceBetween(lastPoint, currentPoint);\n      var angle = angleBetween(lastPoint, currentPoint);\n      \n      for (var i = 0; i < dist; i+=3) {\n        let x = lastPoint.x + (Math.sin(angle) * i) - 25;\n        let y = lastPoint.y + (Math.cos(angle) * i) - 25;\n        ctx.current.arc(x+10, y+10, 20, false, Math.PI * 2, false);\n        ctx.current.beginPath();\n        ctx.current.closePath();\n        ctx.current.fill();\n        ctx.current.stroke();\n    }\n    if (props.handleMouseMove) {\n        props.handleMouseMove(...coords)\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 20\n    ctx.current.strokeStyle = \"#3AAFA9\"\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    )\n   \n  }\n  function stopDrawing() {\n    ctx.current.closePath()\n    // setDrawing(false)\n  }\n  function handleClick(){\n    setDrawing(true)\n  }\n\n\n  return (\n    <div className =\"canvas\">\n      <canvas\n      ref={canvasRef}\n      width={400}\n      height={400}\n      onMouseDown={startDrawing}\n      onMouseOver={startDrawing}\n      // onMouseUp={stopDrawing}\n      onMouseOut={stopDrawing}\n      onMouseMove={handleMouseMove}\n      onClick={handleClick}\n\n      // onMouseMove = {handleClick}\n      />\n    </div>\n  )\n}\n\n// -----------------------------------------------------\n\n// import React, { useState, useEffect, useRef } from 'react'\n\n// export default function Canvas(props) {\n//   const [drawing, setDrawing] = useState(false)\n  \n//   const canvasRef = useRef()\n//   const ctx = useRef()\n  \n//   useEffect(() => {\n//     ctx.current = canvasRef.current.getContext('2d')\n\n//     ctx.current.fillStyle = \"#17252A\"\n//     ctx.current.fillRect(0, 0, 400, 400)\n\n//     ctx.current.strokeStyle = \"#3AAFA9\"\n//     ctx.current.lineWidth = 20\n//     ctx.current.strokeRect(0, 0, 400, 400)\n//   }, [])\n\n\n// function distanceBetween(point1, point2) {\n//   return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n// }\n// function angleBetween(point1, point2) {\n//   return Math.atan2( point2.x - point1.x, point2.y - point1.y );\n// }\n\n\n// //ctx.fillStyle = \"rgba('255, 0, 0, 0.1')\";\n// // ctx.fillStyle = \"red\";\n// // ctx.strokeStyle = \"red\";\n// // ctx.globalAlpha = \"0.01\";\n// // ctx.lineWidth = 0;\n// // ctx.globalCompositeOperation = \"source-over\"; \n\n// var isDrawing, lastPoint;\n\n// function startDrawing(e) {\n//   isDrawing = true;\n//   lastPoint = { x: e.clientX, y: e.clientY };\n// };\n\n// function handleMouseMove(e) {\n//   if (!isDrawing) return;\n  \n//   var currentPoint = { x: e.clientX, y: e.clientY };\n//   var dist = distanceBetween(lastPoint, currentPoint);\n//   var angle = angleBetween(lastPoint, currentPoint);\n  \n//   for (var i = 0; i < dist; i+=3) {\n//     x = lastPoint.x + (Math.sin(angle) * i) - 25;\n//     y = lastPoint.y + (Math.cos(angle) * i) - 25;\n//     ctx.beginPath();\n//     ctx.arc(x+10, y+10, 20, false, Math.PI * 2, false);\n//     ctx.closePath();\n//     ctx.fill();\n//     ctx.stroke();\n//   }\n  \n//   lastPoint = currentPoint;\n// };\n\n// el.onmouseup = function() {\n//   isDrawing = false;\n// };\n\n\n// =----------------------------------------\n\n\n\n\n\n// import React, {useRef, useState, useEffect} from 'react'\n\n// // define brush\n// const HOOK_SVG =\n//   'm129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0'\n// const HOOK_PATH = new Path2D(HOOK_SVG)\n// const SCALE = 0.1\n// const OFFSET = 80\n// function draw(ctx, location) {\n//   ctx.fillStyle = 'deepskyblue'\n//   ctx.shadowColor = 'dodgerblue'\n//   ctx.shadowBlur = 20\n//   ctx.save()\n//   ctx.scale(SCALE, SCALE)\n//   ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET)\n//   ctx.fill(HOOK_PATH)\n//   ctx.restore()\n// }\n\n// function App() {\n//   const canvasRef = useRef(null)\n//   // const [locations, setLocations] = useState([])\n\n//   // take last drawing from local storage\n//   const [locations, setLocations] = React.useState(\n//     JSON.parse(localStorage.getItem('draw-app')) || []\n//   )\n\n//   // mount canvas, draw initial drawing\n//   useEffect(() => {\n//     const canvas = canvasRef.current\n//     const ctx = canvas.getContext('2d')\n//     // ctx.clearRect(0, 0, window.innerHeight, window.innerWidth)\n//     // locations.forEach(location => draw(ctx, location))\n//     ctx.fillRect(0, 0, 400, 400)\n//   })\n\n//   // put last drawing into local storage\n//   useEffect(() => {\n//     localStorage.setItem('draw-app', JSON.stringify(locations))\n//   })\n\n//   // click canvas to draw\n//   function handleCanvasClick(e) {\n//     const newLocation = { x: e.clientX, y: e.clientY }\n//     setLocations([...locations, newLocation])\n//   }\n\n//   function handleClear() {\n//     setLocations([])\n//   }\n//   function handleUndo(){\n//     setLocations(locations.slice(0, -1))\n//   }\n\n//   return (\n//     <div>\n//       <button onClick={handleClear}>Clear</button>\n//       <button onClick={handleUndo}>Undo</button>\n//       <div className = \"canvas\">\n//         <canvas\n//           ref={canvasRef}\n//           width={400}\n//           height={400}\n//           // onClick={handleCanvasClick}\n//           onClick={handleCanvasClick}\n//         />\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default App"]},"metadata":{},"sourceType":"module"}