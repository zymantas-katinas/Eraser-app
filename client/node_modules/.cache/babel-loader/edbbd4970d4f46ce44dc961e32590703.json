{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/client/src/components/Draw/Canvas.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [src, setSrc] = useState();\n  const postRef = useRef(); // set drawing URI to state when time is finished\n\n  useEffect(() => {\n    const dataURI = canvasRef.current.toDataURL();\n    setSrc(dataURI);\n  }, [props.ifFinished]); // set current title state when typing to input\n\n  function inputTitle(event) {\n    event.preventDefault();\n    setTitle(event.target.value);\n  } //----- POST artpiece to DB when post is clicked\n\n\n  const artpiece = {\n    username: \"zymka je\",\n    title: title,\n    uri: src,\n    duration: props.drawingTime\n  };\n\n  const clickPost = () => {\n    if (title) {\n      axios.post('/api/artpieces/add', artpiece).then(res => console.log(res.data));\n      console.log(artpiece);\n    }\n  };\n\n  useEffect(() => {\n    if (title) {\n      postRef.current.style.opacity = \"1\"; // postRef.current.style.backgroundColor = \"green\"\n    } else {\n      postRef.current.style.opacity = \"0\";\n    }\n  }, [title]); // ------- DRAW \n\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n  }, []); // draw when moving mouse if draw = true\n\n  function handleMouseMove(e) {\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n  } // begin path / start drawing\n\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 20; // get background color and set brush color\n\n    const appDiv = document.querySelector(\"body\");\n    const appStyle = getComputedStyle(appDiv);\n    const color = appStyle.backgroundColor;\n    ctx.current.strokeStyle = color;\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop);\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath();\n  } //clear function\n\n\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415);\n  } // ------- TIMER \n  // Reset if reset/start is clicked in parent.\n\n\n  useEffect(() => {\n    handleClear();\n\n    if (props.ifStart === \"reset\") {\n      setDrawing(true);\n    } else {\n      setDrawing(false);\n    }\n  }, [props.ifStart]); // Stop when time is 0\n\n  useEffect(() => {\n    if (props.ifFinished) {\n      setDrawing(false);\n    }\n  }, [props.ifFinished]);\n  return React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, props.ifFinished ? React.createElement(\"div\", {\n    className: \"canvas__btnInput\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    ref: postRef,\n    className: \"wideBtn\",\n    onClick: clickPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"post\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    placeholder: \"TITLE\",\n    autoComplete: \"off\",\n    onChange: inputTitle,\n    value: title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })) : null, React.createElement(\"div\", {\n    className: \"canvas__rect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 415,\n    height: 415 // onMouseDown={startDrawing}\n    // onMouseUp={stopDrawing}\n    ,\n    onMouseOver: startDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/client/src/components/Draw/Canvas.jsx"],"names":["React","useState","useEffect","useRef","axios","Canvas","props","drawing","setDrawing","title","setTitle","src","setSrc","postRef","dataURI","canvasRef","current","toDataURL","ifFinished","inputTitle","event","preventDefault","target","value","artpiece","username","uri","duration","drawingTime","clickPost","post","then","res","console","log","data","style","opacity","ctx","getContext","handleMouseMove","e","coords","clientX","offsetLeft","pageY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","appDiv","document","querySelector","appStyle","getComputedStyle","color","backgroundColor","strokeStyle","beginPath","moveTo","stopDrawing","closePath","handleClear","clearRect","ifStart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [title, setTitle] = useState(\"\")\n  const [src, setSrc] = useState()\n\n  const postRef = useRef()\n\n  // set drawing URI to state when time is finished\n  useEffect(()=>{\n    const dataURI = canvasRef.current.toDataURL();\n    setSrc(dataURI)\n  },[props.ifFinished] )  \n\n  // set current title state when typing to input\n  function inputTitle(event){\n    event.preventDefault()\n      setTitle(event.target.value)\n    }\n    \n  //----- POST artpiece to DB when post is clicked\n  const artpiece = {\n    username: \"zymka je\",\n    title: title,\n    uri: src,\n    duration: props.drawingTime,\n  }\n  const clickPost = () => {  \n    if(title){\n      axios.post('/api/artpieces/add', artpiece)\n      .then(res => console.log(res.data));\n      console.log(artpiece)\n    } \n  }\n\n  useEffect(() => {\n      if(title){\n        postRef.current.style.opacity = \"1\"\n        // postRef.current.style.backgroundColor = \"green\"\n      } else {\n        postRef.current.style.opacity = \"0\"\n      }\n  }, [title])\n\n // ------- DRAW \n const canvasRef = useRef()\n const ctx = useRef()\n useEffect(() => {\n   ctx.current = canvasRef.current.getContext('2d')   \n }, [])\n\n  // draw when moving mouse if draw = true\n  function handleMouseMove(e) {\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n  }\n // begin path / start drawing\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 20\n        // get background color and set brush color\n        const appDiv = document.querySelector(\"body\")\n        const appStyle = getComputedStyle(appDiv)\n        const color = appStyle.backgroundColor    \n    ctx.current.strokeStyle = color\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    )\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath()\n  }\n\n  //clear function\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415)\n }\n\n // ------- TIMER \n  // Reset if reset/start is clicked in parent.\n  useEffect(() => {\n    handleClear()\n    if(props.ifStart === \"reset\"){\n      setDrawing(true)\n    } else {\n      setDrawing(false)\n    }\n  }, [props.ifStart])\n\n  // Stop when time is 0\n  useEffect(() => {\n    if(props.ifFinished){\n      setDrawing(false)\n    } \n  }, [props.ifFinished])\n\n  return (\n    <div className =\"canvas\">\n      {props.ifFinished ? \n       <div className =\"canvas__btnInput\">\n          <button ref= {postRef} className =\"wideBtn\" onClick ={clickPost}>post</button>\n          <input \n            type=\"text\" \n            name=\"title\" \n            placeholder =\"TITLE\" \n            autoComplete=\"off\"  \n            onChange={inputTitle} \n            value={title}\n          /> \n        </div>\n      : null}\n\n      <div className =\"canvas__rect\">\n        <canvas\n        ref={canvasRef}\n        width={415}\n        height={415}\n        // onMouseDown={startDrawing}\n        // onMouseUp={stopDrawing}\n        onMouseOver={startDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n        />\n      </div>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}