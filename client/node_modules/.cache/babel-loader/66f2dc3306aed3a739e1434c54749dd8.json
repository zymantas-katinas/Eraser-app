{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/client/src/components/Draw/Canvas.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [src, setSrc] = useState();\n  const postRef = useRef();\n  const canvasRect = useRef();\n  const inputRef = useRef(); // set drawing URI to state when time is finished\n\n  useEffect(() => {\n    const dataURI = canvasRef.current.toDataURL();\n    setSrc(dataURI);\n  }, [props.ifFinished]); // set current title state when typing to input\n\n  const inputTitle = event => {\n    event.preventDefault();\n    setTitle(event.target.value);\n  }; //----- POST artpiece to DB when post is clicked\n\n\n  const artpiece = {\n    username: \"zymka je\",\n    title: title,\n    uri: src,\n    duration: props.drawingTime\n  };\n\n  const clickPost = () => {\n    if (title) {\n      axios.post('/api/artpieces/add', artpiece).then(res => console.log(res.data)); // styling when post clicked\n      // canvasRect.current.classList.add('canvas__rectPostClick')\n\n      canvasRect.current.style.transform = `translate(${window.innerWidth}px)`;\n      postRef.current.style.opacity = \"0\";\n      inputRef.current.style.opacity = \"0\";\n      setTimeout(() => {\n        props.reset();\n        setTitle(\"\"); // canvasRect.current.classList.remove('canvas__rectPostClick')\n\n        canvasRect.current.style.transform = \"translate(0)\";\n      }, 500);\n    } else {\n      inputRef.current.style.transform = \"translate(3px, 3px)\";\n      setTimeout(() => {\n        inputRef.current.style.transform = \"translate(0)\";\n      }, 100);\n    }\n  }; // hide post button if tite is empty\n\n\n  useEffect(() => {\n    if (props.ifFinished) {\n      if (title) {\n        postRef.current.style.opacity = '1';\n      } else {\n        postRef.current.style.opacity = '0.3';\n      }\n    }\n  }, [title]); // ------- DRAW \n\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n  }, []); // draw when moving mouse if draw = true\n\n  const handleMouseMove = e => {\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n  }; // begin path / start drawing\n\n\n  const startDrawing = e => {\n    if (ctx.current) {\n      ctx.current.lineJoin = 'round';\n      ctx.current.lineCap = 'round';\n      ctx.current.lineWidth = 20; // get background color and set brush color\n\n      const appDiv = document.querySelector(\"body\");\n      const appStyle = getComputedStyle(appDiv);\n      const color = appStyle.backgroundColor;\n      ctx.current.strokeStyle = color;\n      ctx.current.beginPath(); // actual coordinates\n\n      ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop);\n    }\n  };\n\n  const stopDrawing = () => {\n    ctx.current.closePath();\n  }; //clear function\n\n\n  const handleClear = () => {\n    ctx.current.clearRect(0, 0, 415, 415);\n  }; // ------- TIMER \n  // Reset if reset/start is clicked in parent.\n\n\n  useEffect(() => {\n    handleClear();\n\n    if (props.ifStart === \"reset\") {\n      setDrawing(true);\n    } else {\n      setDrawing(false);\n    }\n  }, [props.ifStart]); // Stop when time is 0\n\n  useEffect(() => {\n    if (props.ifFinished) {\n      setDrawing(false);\n      canvasRect.current.classList.add('canvas__rectFinished');\n      setTimeout(() => {\n        canvasRect.current.classList.remove('canvas__rectFinished');\n      }, 100);\n    }\n  }, [props.ifFinished]);\n  return React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, props.ifFinished ? React.createElement(\"div\", {\n    className: \"canvas__btnInput\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    ref: postRef,\n    className: \"wideBtn\",\n    onClick: clickPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"post\"), React.createElement(\"input\", {\n    ref: inputRef,\n    type: \"text\",\n    name: \"title\",\n    placeholder: \"TITLE\",\n    autoComplete: \"off\",\n    onChange: inputTitle,\n    value: title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })) : null, React.createElement(\"div\", {\n    ref: canvasRect,\n    className: \"canvas__rect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 415,\n    height: 415 // onMouseDown={startDrawing}\n    // onMouseUp={stopDrawing}\n    ,\n    onMouseOver: startDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/client/src/components/Draw/Canvas.jsx"],"names":["React","useState","useEffect","useRef","axios","Canvas","props","drawing","setDrawing","title","setTitle","src","setSrc","postRef","canvasRect","inputRef","dataURI","canvasRef","current","toDataURL","ifFinished","inputTitle","event","preventDefault","target","value","artpiece","username","uri","duration","drawingTime","clickPost","post","then","res","console","log","data","style","transform","window","innerWidth","opacity","setTimeout","reset","ctx","getContext","handleMouseMove","e","coords","clientX","offsetLeft","pageY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","appDiv","document","querySelector","appStyle","getComputedStyle","color","backgroundColor","strokeStyle","beginPath","moveTo","stopDrawing","closePath","handleClear","clearRect","ifStart","classList","add","remove"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [title, setTitle] = useState(\"\")\n  const [src, setSrc] = useState()\n\n  const postRef = useRef()\n  const canvasRect = useRef()\n  const inputRef = useRef()\n\n  // set drawing URI to state when time is finished\n  useEffect(()=>{\n    const dataURI = canvasRef.current.toDataURL();\n    setSrc(dataURI)\n  },[props.ifFinished] )  \n\n  // set current title state when typing to input\n  const inputTitle = (event) => {\n    event.preventDefault()\n      setTitle(event.target.value)\n    }\n    \n  //----- POST artpiece to DB when post is clicked\n  const artpiece = {\n    username: \"zymka je\",\n    title: title,\n    uri: src,\n    duration: props.drawingTime,\n  }\n  const clickPost = () => {  \n    if(title){\n      axios.post('/api/artpieces/add', artpiece)\n      .then(res => console.log(res.data));\n\n      // styling when post clicked\n      // canvasRect.current.classList.add('canvas__rectPostClick')\n      canvasRect.current.style.transform = `translate(${window.innerWidth}px)`\n      postRef.current.style.opacity = \"0\"\n      inputRef.current.style.opacity = \"0\"\n      setTimeout(() =>{\n        props.reset()\n        setTitle(\"\")\n        // canvasRect.current.classList.remove('canvas__rectPostClick')\n        canvasRect.current.style.transform = \"translate(0)\"\n      }, 500)\n    } else {\n      inputRef.current.style.transform = \"translate(3px, 3px)\"\n      setTimeout(() =>{\n        inputRef.current.style.transform = \"translate(0)\"\n      }, 100)\n    }\n  }\n\n  // hide post button if tite is empty\n  useEffect(() => {\n    if(props.ifFinished){\n      if(title){\n        postRef.current.style.opacity = '1'\n      } else {\n        postRef.current.style.opacity = '0.3'\n      }\n    }\n  }, [title])\n\n // ------- DRAW \n const canvasRef = useRef()\n const ctx = useRef()\n useEffect(() => {\n   ctx.current = canvasRef.current.getContext('2d')   \n }, [])\n\n  // draw when moving mouse if draw = true\n  const handleMouseMove = (e) => {\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n  }\n // begin path / start drawing\n  const startDrawing = (e) => {\n    if(ctx.current){\n      ctx.current.lineJoin = 'round'\n      ctx.current.lineCap = 'round'\n      ctx.current.lineWidth = 20\n          // get background color and set brush color\n          const appDiv = document.querySelector(\"body\")\n          const appStyle = getComputedStyle(appDiv)\n          const color = appStyle.backgroundColor    \n      ctx.current.strokeStyle = color\n      ctx.current.beginPath();\n      // actual coordinates\n      ctx.current.moveTo(\n        e.clientX - canvasRef.current.offsetLeft,\n        e.pageY - canvasRef.current.offsetTop\n      )\n    }\n  }\n\n  const stopDrawing = () => {\n    ctx.current.closePath()\n  }\n\n  //clear function\n  const handleClear = () => {\n    ctx.current.clearRect(0, 0, 415, 415)\n }\n\n // ------- TIMER \n  // Reset if reset/start is clicked in parent.\n  useEffect(() => {\n    handleClear()\n    if(props.ifStart === \"reset\"){\n      setDrawing(true)\n    } else {\n      setDrawing(false)\n    }\n  }, [props.ifStart])\n\n  // Stop when time is 0\n  useEffect(() => {\n    if(props.ifFinished){\n      setDrawing(false)\n      canvasRect.current.classList.add('canvas__rectFinished')\n      setTimeout(() =>{\n        canvasRect.current.classList.remove('canvas__rectFinished')\n      }, 100)\n    } \n  }, [props.ifFinished])\n\n  return (\n    <div className =\"canvas\">\n      {props.ifFinished ? \n       <div className =\"canvas__btnInput\">\n          <button ref= {postRef} className =\"wideBtn\" onClick ={clickPost}>post</button>\n          <input \n            ref ={inputRef}\n            type=\"text\" \n            name=\"title\" \n            placeholder =\"TITLE\" \n            autoComplete=\"off\"  \n            onChange={inputTitle} \n            value={title}\n          /> \n        </div>\n      : null}\n\n      <div ref = {canvasRect} className =\"canvas__rect\">\n        <canvas\n        ref={canvasRef}\n        width={415}\n        height={415}\n        // onMouseDown={startDrawing}\n        // onMouseUp={stopDrawing}\n        onMouseOver={startDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n        />\n      </div>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}