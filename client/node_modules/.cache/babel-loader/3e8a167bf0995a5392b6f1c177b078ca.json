{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [restart, setRestart] = useState(true);\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d'); // ctx.current.fillStyle = \"#17252A\"\n    // ctx.current.fillRect(0, 0, 400, 400)\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    // ctx.current.lineWidth = 20\n    // ctx.current.strokeRect(0, 0, 400, 400)\n  }, []); // Reset if reset/start is clicked in parent.\n\n  useEffect(() => {\n    handleClear();\n\n    if (props.startRestart === \"reset\") {\n      setDrawing(true);\n    } else {\n      setDrawing(false);\n    }\n  }, [props.startRestart]);\n\n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 20;\n    ctx.current.strokeStyle = \"#3AAFA9\";\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop);\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath(); // setDrawing(false)\n  }\n\n  function handleClick() {// setDrawing(true)\n    // console.log(props.title)\n  }\n\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 400, 400);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleClear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Clear\"), React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 400,\n    height: 400,\n    onMouseDown: startDrawing,\n    onMouseOver: startDrawing // onMouseUp={stopDrawing}\n    ,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n} // -----------------------------------------------------\n// =----------------------------------------\n// import React, {useRef, useState, useEffect} from 'react'\n// // define brush\n// const HOOK_SVG =\n//   'm129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0'\n// const HOOK_PATH = new Path2D(HOOK_SVG)\n// const SCALE = 0.1\n// const OFFSET = 80\n// function draw(ctx, location) {\n//   ctx.fillStyle = 'deepskyblue'\n//   ctx.shadowColor = 'dodgerblue'\n//   ctx.shadowBlur = 20\n//   ctx.save()\n//   ctx.scale(SCALE, SCALE)\n//   ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET)\n//   ctx.fill(HOOK_PATH)\n//   ctx.restore()\n// }\n// function App() {\n//   const canvasRef = useRef(null)\n//   // const [locations, setLocations] = useState([])\n//   // take last drawing from local storage\n//   const [locations, setLocations] = React.useState(\n//     JSON.parse(localStorage.getItem('draw-app')) || []\n//   )\n//   // mount canvas, draw initial drawing\n//   useEffect(() => {\n//     const canvas = canvasRef.current\n//     const ctx = canvas.getContext('2d')\n//     // ctx.clearRect(0, 0, window.innerHeight, window.innerWidth)\n//     // locations.forEach(location => draw(ctx, location))\n//     ctx.fillRect(0, 0, 400, 400)\n//   })\n//   // put last drawing into local storage\n//   useEffect(() => {\n//     localStorage.setItem('draw-app', JSON.stringify(locations))\n//   })\n//   // click canvas to draw\n//   function handleCanvasClick(e) {\n//     const newLocation = { x: e.clientX, y: e.clientY }\n//     setLocations([...locations, newLocation])\n//   }\n//   function handleClear() {\n//     setLocations([])\n//   }\n//   function handleUndo(){\n//     setLocations(locations.slice(0, -1))\n//   }\n//   return (\n//     <div>\n//       <button onClick={handleClear}>Clear</button>\n//       <button onClick={handleUndo}>Undo</button>\n//       <div className = \"canvas\">\n//         <canvas\n//           ref={canvasRef}\n//           width={400}\n//           height={400}\n//           // onClick={handleCanvasClick}\n//           onClick={handleCanvasClick}\n//         />\n//       </div>\n//     </div>\n//   )\n// }\n// export default App","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","Canvas","props","drawing","setDrawing","restart","setRestart","canvasRef","ctx","current","getContext","handleClear","startRestart","handleMouseMove","e","coords","clientX","offsetLeft","pageY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","moveTo","stopDrawing","closePath","handleClick","clearRect"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [restart, setRestart] = useState(true)\n  \n  const canvasRef = useRef()\n  const ctx = useRef()\n  \n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n    // ctx.current.fillStyle = \"#17252A\"\n    // ctx.current.fillRect(0, 0, 400, 400)\n\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    // ctx.current.lineWidth = 20\n    // ctx.current.strokeRect(0, 0, 400, 400)\n   \n  }, [])\n\n  // Reset if reset/start is clicked in parent.\n  useEffect(() => {\n    handleClear()\n    if(props.startRestart === \"reset\"){\n      setDrawing(true)\n    } else {\n      setDrawing(false)\n    }\n  }, [props.startRestart])\n  \n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 20\n    ctx.current.strokeStyle = \"#3AAFA9\"\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    )\n   \n  }\n  function stopDrawing() {\n    ctx.current.closePath()\n    // setDrawing(false)\n  }\n  function handleClick(){\n    // setDrawing(true)\n    // console.log(props.title)\n  }\n\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 400, 400)\n  }\n\n  return (\n    <div>\n      <button onClick={handleClear}>Clear</button>\n      <div className =\"canvas\">\n        <canvas\n        ref={canvasRef}\n        width={400}\n        height={400}\n        onMouseDown={startDrawing}\n        onMouseOver={startDrawing}\n        // onMouseUp={stopDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n        onClick={handleClick}\n        />\n      </div>\n    </div>\n  )\n}\n\n// -----------------------------------------------------\n\n// =----------------------------------------\n\n// import React, {useRef, useState, useEffect} from 'react'\n\n// // define brush\n// const HOOK_SVG =\n//   'm129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0'\n// const HOOK_PATH = new Path2D(HOOK_SVG)\n// const SCALE = 0.1\n// const OFFSET = 80\n// function draw(ctx, location) {\n//   ctx.fillStyle = 'deepskyblue'\n//   ctx.shadowColor = 'dodgerblue'\n//   ctx.shadowBlur = 20\n//   ctx.save()\n//   ctx.scale(SCALE, SCALE)\n//   ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET)\n//   ctx.fill(HOOK_PATH)\n//   ctx.restore()\n// }\n\n// function App() {\n//   const canvasRef = useRef(null)\n//   // const [locations, setLocations] = useState([])\n\n//   // take last drawing from local storage\n//   const [locations, setLocations] = React.useState(\n//     JSON.parse(localStorage.getItem('draw-app')) || []\n//   )\n\n//   // mount canvas, draw initial drawing\n//   useEffect(() => {\n//     const canvas = canvasRef.current\n//     const ctx = canvas.getContext('2d')\n//     // ctx.clearRect(0, 0, window.innerHeight, window.innerWidth)\n//     // locations.forEach(location => draw(ctx, location))\n//     ctx.fillRect(0, 0, 400, 400)\n//   })\n\n//   // put last drawing into local storage\n//   useEffect(() => {\n//     localStorage.setItem('draw-app', JSON.stringify(locations))\n//   })\n\n//   // click canvas to draw\n//   function handleCanvasClick(e) {\n//     const newLocation = { x: e.clientX, y: e.clientY }\n//     setLocations([...locations, newLocation])\n//   }\n\n//   function handleClear() {\n//     setLocations([])\n//   }\n//   function handleUndo(){\n//     setLocations(locations.slice(0, -1))\n//   }\n\n//   return (\n//     <div>\n//       <button onClick={handleClear}>Clear</button>\n//       <button onClick={handleUndo}>Undo</button>\n//       <div className = \"canvas\">\n//         <canvas\n//           ref={canvasRef}\n//           width={400}\n//           height={400}\n//           // onClick={handleCanvasClick}\n//           onClick={handleCanvasClick}\n//         />\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default App"]},"metadata":{},"sourceType":"module"}