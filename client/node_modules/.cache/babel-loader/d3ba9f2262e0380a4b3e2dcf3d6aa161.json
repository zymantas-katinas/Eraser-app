{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\n// import React, { useState, useEffect, useRef } from 'react'\n// export default function Canvas(props) {\n//   const [drawing, setDrawing] = useState(false)\n//   const [width, setWidth] = useState(400)\n//   const [height, setHeight] = useState(400)\n//   const canvasRef = useRef()\n//   const ctx = useRef()\n//   useEffect(() => {\n//     ctx.current = canvasRef.current.getContext('2d')\n//   }, [])\n//   function handleMouseMove(e) {\n//     // actual coordinates\n//     const coords = [\n//       e.clientX - canvasRef.current.offsetLeft,\n//       e.clientY - canvasRef.current.offsetTop\n//     ]\n//     if (drawing) { \n//       ctx.current.lineTo(...coords)\n//       ctx.current.stroke()\n//     }\n//     if (props.handleMouseMove) {\n//         props.handleMouseMove(...coords)\n//     }\n//   }\n//   function startDrawing(e) {\n//     ctx.current.lineJoin = 'round'\n//     ctx.current.lineCap = 'round'\n//     ctx.current.lineWidth = 10\n//     ctx.current.strokeStyle = props.color\n//     ctx.current.beginPath();\n//     // actual coordinates\n//     ctx.current.moveTo(\n//       e.clientX - canvasRef.current.offsetLeft,\n//       e.clientY - canvasRef.current.offsetTop\n//     )\n//     setDrawing(true)\n//   }\n//   function stopDrawing() {\n//     ctx.current.closePath()\n//     setDrawing(false)\n//   }\n//   return (\n//     <div className =\"canvas\">\n//       <canvas\n//       ref={canvasRef}\n//       width={width}\n//       height={height}\n//       onMouseDown={startDrawing}\n//       onMouseUp={stopDrawing}\n//       onMouseOut={stopDrawing}\n//       onMouseMove={handleMouseMove}\n//       />\n//     </div>\n//   )\n// }\nimport React, { useRef, useState, useEffect } from 'react'; // define brush\n\nconst HOOK_SVG = 'm129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0';\nconst HOOK_PATH = new Path2D(HOOK_SVG);\nconst SCALE = 0.1;\nconst OFFSET = 80;\n\nfunction draw(ctx, location) {\n  ctx.fillStyle = 'deepskyblue';\n  ctx.shadowColor = 'dodgerblue';\n  ctx.shadowBlur = 20;\n  ctx.save();\n  ctx.scale(SCALE, SCALE);\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n  ctx.fill(HOOK_PATH);\n  ctx.restore();\n}\n\nfunction App() {\n  const canvasRef = useRef(null); // const [locations, setLocations] = useState([])\n  // take last drawing from local storage\n\n  const [locations, setLocations] = React.useState(JSON.parse(localStorage.getItem('draw-app')) || []); // mount canvas, draw initial drawing\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n    locations.forEach(location => draw(ctx, location));\n  }); // put last drawing into local storage\n\n  useEffect(() => {\n    localStorage.setItem('draw-app', JSON.stringify(locations));\n  }); // click canvas to draw\n\n  function handleCanvasClick(e) {\n    const newLocation = {\n      x: e.clientX,\n      y: e.clientY\n    };\n    setLocations([...locations, newLocation]);\n  }\n\n  function handleClear() {\n    setLocations([]);\n  }\n\n  function handleUndo() {\n    setLocations(locations.slice(0, -1));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleClear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Clear\"), React.createElement(\"button\", {\n    onClick: handleUndo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Undo\"), React.createElement(\"canvas\", {\n    className: \"canvas\",\n    ref: canvasRef,\n    width: window.innerWidth,\n    height: window.innerHeight // onClick={handleCanvasClick}\n    ,\n    onClicj: handleCanvasClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useRef","useState","useEffect","HOOK_SVG","HOOK_PATH","Path2D","SCALE","OFFSET","draw","ctx","location","fillStyle","shadowColor","shadowBlur","save","scale","translate","x","y","fill","restore","App","canvasRef","locations","setLocations","JSON","parse","localStorage","getItem","canvas","current","getContext","clearRect","window","innerHeight","innerWidth","forEach","setItem","stringify","handleCanvasClick","e","newLocation","clientX","clientY","handleClear","handleUndo","slice"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect, useRef } from 'react'\n\n// export default function Canvas(props) {\n//   const [drawing, setDrawing] = useState(false)\n//   const [width, setWidth] = useState(400)\n//   const [height, setHeight] = useState(400)\n  \n//   const canvasRef = useRef()\n//   const ctx = useRef()\n  \n//   useEffect(() => {\n//     ctx.current = canvasRef.current.getContext('2d')\n//   }, [])\n  \n//   function handleMouseMove(e) {\n//     // actual coordinates\n//     const coords = [\n//       e.clientX - canvasRef.current.offsetLeft,\n//       e.clientY - canvasRef.current.offsetTop\n//     ]\n//     if (drawing) { \n//       ctx.current.lineTo(...coords)\n//       ctx.current.stroke()\n//     }\n//     if (props.handleMouseMove) {\n//         props.handleMouseMove(...coords)\n//     }\n//   }\n//   function startDrawing(e) {\n//     ctx.current.lineJoin = 'round'\n//     ctx.current.lineCap = 'round'\n//     ctx.current.lineWidth = 10\n//     ctx.current.strokeStyle = props.color\n//     ctx.current.beginPath();\n//     // actual coordinates\n//     ctx.current.moveTo(\n//       e.clientX - canvasRef.current.offsetLeft,\n//       e.clientY - canvasRef.current.offsetTop\n//     )\n//     setDrawing(true)\n//   }\n//   function stopDrawing() {\n//     ctx.current.closePath()\n//     setDrawing(false)\n//   }\n\n//   return (\n//     <div className =\"canvas\">\n//       <canvas\n//       ref={canvasRef}\n//       width={width}\n//       height={height}\n//       onMouseDown={startDrawing}\n//       onMouseUp={stopDrawing}\n//       onMouseOut={stopDrawing}\n//       onMouseMove={handleMouseMove}\n//       />\n//     </div>\n//   )\n// }\n\nimport React, {useRef, useState, useEffect} from 'react'\n\n// define brush\nconst HOOK_SVG =\n  'm129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0'\nconst HOOK_PATH = new Path2D(HOOK_SVG)\nconst SCALE = 0.1\nconst OFFSET = 80\nfunction draw(ctx, location) {\n  ctx.fillStyle = 'deepskyblue'\n  ctx.shadowColor = 'dodgerblue'\n  ctx.shadowBlur = 20\n  ctx.save()\n  ctx.scale(SCALE, SCALE)\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET)\n  ctx.fill(HOOK_PATH)\n  ctx.restore()\n}\n\nfunction App() {\n  const canvasRef = useRef(null)\n  // const [locations, setLocations] = useState([])\n\n  // take last drawing from local storage\n  const [locations, setLocations] = React.useState(\n    JSON.parse(localStorage.getItem('draw-app')) || []\n  )\n\n  // mount canvas, draw initial drawing\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    ctx.clearRect(0, 0, window.innerHeight, window.innerWidth)\n    locations.forEach(location => draw(ctx, location))\n  })\n\n  // put last drawing into local storage\n  useEffect(() => {\n    localStorage.setItem('draw-app', JSON.stringify(locations))\n  })\n\n  // click canvas to draw\n  function handleCanvasClick(e) {\n    const newLocation = { x: e.clientX, y: e.clientY }\n    setLocations([...locations, newLocation])\n  }\n\n  function handleClear() {\n    setLocations([])\n  }\n  function handleUndo(){\n    setLocations(locations.slice(0, -1))\n  }\n\n  return (\n    <div>\n      <button onClick={handleClear}>Clear</button>\n      <button onClick={handleUndo}>Undo</button>\n      <canvas\n        className = \"canvas\"\n        ref={canvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        // onClick={handleCanvasClick}\n        onClicj={handleCanvasClick}\n      />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}