{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [width, setWidth] = useState(400);\n  const [height, setHeight] = useState(400);\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n  }, []);\n\n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.clientY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n\n    if (props.handleMouseMove) {\n      props.handleMouseMove(...coords);\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 10;\n    ctx.current.strokeStyle = props.color;\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.clientY - canvasRef.current.offsetTop);\n    setDrawing(true);\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath();\n    setDrawing(false);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height,\n    onMouseDown: startDrawing,\n    onMouseUp: stopDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","Canvas","props","drawing","setDrawing","width","setWidth","height","setHeight","canvasRef","ctx","current","getContext","handleMouseMove","e","coords","clientX","offsetLeft","clientY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","strokeStyle","color","beginPath","moveTo","stopDrawing","closePath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,GAAD,CAAlC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,GAAD,CAApC;AAEA,QAAMW,SAAS,GAAGT,MAAM,EAAxB;AACA,QAAMU,GAAG,GAAGV,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,GAAG,CAACC,OAAJ,GAAcF,SAAS,CAACE,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAd;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B;AACA,UAAMC,MAAM,GAAG,CACbD,CAAC,CAACE,OAAF,GAAYP,SAAS,CAACE,OAAV,CAAkBM,UADjB,EAEbH,CAAC,CAACI,OAAF,GAAYT,SAAS,CAACE,OAAV,CAAkBQ,SAFjB,CAAf;;AAIA,QAAIhB,OAAJ,EAAa;AACXO,MAAAA,GAAG,CAACC,OAAJ,CAAYS,MAAZ,CAAmB,GAAGL,MAAtB;AACAL,MAAAA,GAAG,CAACC,OAAJ,CAAYU,MAAZ;AACD;;AACD,QAAInB,KAAK,CAACW,eAAV,EAA2B;AACvBX,MAAAA,KAAK,CAACW,eAAN,CAAsB,GAAGE,MAAzB;AACH;AACF;;AACD,WAASO,YAAT,CAAsBR,CAAtB,EAAyB;AACvBJ,IAAAA,GAAG,CAACC,OAAJ,CAAYY,QAAZ,GAAuB,OAAvB;AACAb,IAAAA,GAAG,CAACC,OAAJ,CAAYa,OAAZ,GAAsB,OAAtB;AACAd,IAAAA,GAAG,CAACC,OAAJ,CAAYc,SAAZ,GAAwB,EAAxB;AACAf,IAAAA,GAAG,CAACC,OAAJ,CAAYe,WAAZ,GAA0BxB,KAAK,CAACyB,KAAhC;AACAjB,IAAAA,GAAG,CAACC,OAAJ,CAAYiB,SAAZ,GALuB,CAMvB;;AACAlB,IAAAA,GAAG,CAACC,OAAJ,CAAYkB,MAAZ,CACEf,CAAC,CAACE,OAAF,GAAYP,SAAS,CAACE,OAAV,CAAkBM,UADhC,EAEEH,CAAC,CAACI,OAAF,GAAYT,SAAS,CAACE,OAAV,CAAkBQ,SAFhC;AAIAf,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACD,WAAS0B,WAAT,GAAuB;AACrBpB,IAAAA,GAAG,CAACC,OAAJ,CAAYoB,SAAZ;AACA3B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAE,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACA,IAAA,GAAG,EAAEK,SADL;AAEA,IAAA,KAAK,EAAEJ,KAFP;AAGA,IAAA,MAAM,EAAEE,MAHR;AAIA,IAAA,WAAW,EAAEe,YAJb;AAKA,IAAA,SAAS,EAAEQ,WALX;AAMA,IAAA,UAAU,EAAEA,WANZ;AAOA,IAAA,WAAW,EAAEjB,eAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAaD","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [width, setWidth] = useState(400)\n  const [height, setHeight] = useState(400)\n  \n  const canvasRef = useRef()\n  const ctx = useRef()\n  \n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n  }, [])\n  \n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n    if (props.handleMouseMove) {\n        props.handleMouseMove(...coords)\n    }\n  }\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 10\n    ctx.current.strokeStyle = props.color\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    )\n    setDrawing(true)\n  }\n  function stopDrawing() {\n    ctx.current.closePath()\n    setDrawing(false)\n  }\n  \n  return (\n    <div className =\"canvas\">\n      <canvas\n      ref={canvasRef}\n      width={width}\n      height={height}\n      onMouseDown={startDrawing}\n      onMouseUp={stopDrawing}\n      onMouseOut={stopDrawing}\n      onMouseMove={handleMouseMove}\n      />\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}