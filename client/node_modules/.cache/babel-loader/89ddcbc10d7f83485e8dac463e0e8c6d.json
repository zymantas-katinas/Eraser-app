{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [restart, setRestart] = useState(true);\n  const canvasRef = useRef();\n  const ctx = useRef();\n  const converted = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d'); // ctx.current.fillStyle = \"#17252A\"\n    // ctx.current.fillRect(0, 0, 415, 415)\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    // ctx.current.lineWidth = 20\n    // ctx.current.strokeRect(0, 0, 415, 415)\n  }, []); // Reset if reset/start is clicked in parent.\n\n  useEffect(() => {\n    handleClear();\n\n    if (props.ifStart === \"reset\") {\n      setDrawing(true);\n    } else {\n      setDrawing(false);\n    }\n  }, [props.ifStart]); // Stop when time is 0\n\n  useEffect(() => {\n    if (props.ifFinished) {\n      setDrawing(false);\n    }\n  }, [props.ifFinished]); // draw when moving mouse if draw = true\n\n  function handleMouseMove(e) {\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 20; // ctx.current.strokeStyle = \"#3AAFA9\"\n\n    ctx.current.strokeStyle = \"white\";\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop);\n  } //clear\n\n\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415);\n  } //stop\n\n\n  function stopDrawing() {\n    ctx.current.closePath();\n  } // download\n  // function download(){\n  //   const dataURI = canvasRef.current.toDataURL();\n  //   console.log(dataURI)\n  //   converted.current.src = dataURI\n  // }\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 415,\n    height: 415,\n    onMouseOver: startDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","Canvas","props","drawing","setDrawing","restart","setRestart","canvasRef","ctx","converted","current","getContext","handleClear","ifStart","ifFinished","handleMouseMove","e","coords","clientX","offsetLeft","pageY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","moveTo","clearRect","stopDrawing","closePath"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [restart, setRestart] = useState(true)\n  \n  const canvasRef = useRef()\n  const ctx = useRef()\n  const converted = useRef()\n  \n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n    // ctx.current.fillStyle = \"#17252A\"\n    // ctx.current.fillRect(0, 0, 415, 415)\n\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    // ctx.current.lineWidth = 20\n    // ctx.current.strokeRect(0, 0, 415, 415)\n   \n  }, [])\n\n  // Reset if reset/start is clicked in parent.\n  useEffect(() => {\n    handleClear()\n    if(props.ifStart === \"reset\"){\n      setDrawing(true)\n    } else {\n      setDrawing(false)\n    }\n  }, [props.ifStart])\n\n  // Stop when time is 0\n  useEffect(() => {\n    if(props.ifFinished){\n      setDrawing(false)\n    } \n  }, [props.ifFinished])\n\n\n  // draw when moving mouse if draw = true\n  function handleMouseMove(e) {\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 20\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    ctx.current.strokeStyle = \"white\"\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    )\n  }\n\n\n   //clear\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415)\n  }\n\n  //stop\n  function stopDrawing() {\n    ctx.current.closePath()\n  }\n\n  // download\n  // function download(){\n  //   const dataURI = canvasRef.current.toDataURL();\n  //   console.log(dataURI)\n  //   converted.current.src = dataURI\n  // }\n\n  return (\n    <div>\n      {/* <button onClick ={download}> download </button> */}\n      {/* <div className =\"canvas\"> <img ref={converted} src=\"\" /></div> */}\n      <div className =\"canvas\">\n        <canvas\n        ref={canvasRef}\n        width={415}\n        height={415}\n        onMouseOver={startDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n        />\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}