{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [restart, setRestart] = useState(true);\n  const canvasRef = useRef();\n  const ctx = useRef(); // const converted = useRef()\n\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n  }, []); // useEffect(() => {\n\n  ctx.current.fillStyle = \"black\";\n  ctx.current.fillRect(0, 0, 415, 415); // })\n  // Reset if reset/start is clicked in parent.\n\n  useEffect(() => {\n    handleClear();\n\n    if (props.ifStart === \"reset\") {\n      setDrawing(true);\n    } else {\n      setDrawing(false);\n    }\n  }, [props.ifStart]); // Stop when time is 0\n\n  useEffect(() => {\n    if (props.ifFinished) {\n      setDrawing(false);\n    }\n  }, [props.ifFinished]); // draw when moving mouse if draw = true\n\n  function handleMouseMove(e) {\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop];\n    ctx.current.lineTo(...coords);\n    ctx.current.stroke();\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 20; // ctx.current.strokeStyle = \"#3AAFA9\"\n\n    ctx.current.strokeStyle = \"white\";\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.pageY - canvasRef.current.offsetTop);\n  } //clear\n\n\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415);\n  } //stop\n\n\n  function stopDrawing() {\n    ctx.current.closePath();\n  } // download\n  // function download(){\n  //   const dataURI = canvasRef.current.toDataURL();\n  //   console.log(dataURI)\n  //   converted.current.src = dataURI\n  // }\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 415,\n    height: 415,\n    onMouseOver: startDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","Canvas","props","drawing","setDrawing","restart","setRestart","canvasRef","ctx","current","getContext","fillStyle","fillRect","handleClear","ifStart","ifFinished","handleMouseMove","e","coords","clientX","offsetLeft","pageY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","moveTo","clearRect","stopDrawing","closePath"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [restart, setRestart] = useState(true)\n  \n  const canvasRef = useRef()\n  const ctx = useRef()\n  // const converted = useRef()\n  \n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n  },[])\n\n  // useEffect(() => {\n    ctx.current.fillStyle = \"black\";\n    ctx.current.fillRect(0, 0, 415, 415)\n  // })\n\n  // Reset if reset/start is clicked in parent.\n  useEffect(() => {\n    handleClear()\n    if(props.ifStart === \"reset\"){\n      setDrawing(true)\n    } else {\n      setDrawing(false)\n    }\n  }, [props.ifStart])\n\n  // Stop when time is 0\n  useEffect(() => {\n    if(props.ifFinished){\n      setDrawing(false)\n    } \n  }, [props.ifFinished])\n\n\n  // draw when moving mouse if draw = true\n  function handleMouseMove(e) {\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    ]\n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 20\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    ctx.current.strokeStyle = \"white\"\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.pageY - canvasRef.current.offsetTop\n    )\n  }\n\n   //clear\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415)\n  }\n\n  //stop\n  function stopDrawing() {\n    ctx.current.closePath()\n  }\n\n  // download\n  // function download(){\n  //   const dataURI = canvasRef.current.toDataURL();\n  //   console.log(dataURI)\n  //   converted.current.src = dataURI\n  // }\n\n  return (\n    <div>\n      {/* <button onClick ={download}> download </button> */}\n      {/* <div className =\"canvas\"> <img ref={converted} src=\"\" /></div> */}\n      <div className =\"canvas\">\n        <canvas\n        ref={canvasRef}\n        width={415}\n        height={415}\n        onMouseOver={startDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n        />\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}