{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [restart, setRestart] = useState(true);\n  const canvasRef = useRef();\n  const ctx = useRef();\n  const converted = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d'); // ctx.current.fillStyle = \"#17252A\"\n    // ctx.current.fillRect(0, 0, 415, 415)\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    // ctx.current.lineWidth = 20\n    // ctx.current.strokeRect(0, 0, 415, 415)\n  }, []); // Reset if reset/start is clicked in parent.\n\n  useEffect(() => {\n    handleClear();\n\n    if (props.ifStart === \"reset\") {\n      setDrawing(true);\n    } else {\n      setDrawing(false);\n    }\n  }, [props.ifStart]); // Stop when time is 0\n\n  useEffect(() => {\n    if (props.ifFinished) {\n      setDrawing(false);\n    }\n  }, [props.ifFinished]); //clear function\n\n  function handleClear() {\n    ctx.current.clearRect(0, 0, 415, 415);\n  } // draw when moving mouse if draw = true\n  // function handleMouseMove(e) {\n  //   const coords = [\n  //     e.clientX - canvasRef.current.offsetLeft,\n  //     e.pageY - canvasRef.current.offsetTop\n  //   ]\n  //   if (drawing) { \n  //     ctx.current.lineTo(...coords)\n  //     ctx.current.stroke()\n  //   }\n  // }\n  // --------------------\n\n\n  function handleMouseMove(e) {\n    if (isPress) {\n      var x = e.offsetX;\n      var y = e.offsetY;\n      ctx.current.globalCompositeOperation = 'destination-out';\n      ctx.current.beginPath();\n      ctx.current.arc(x, y, 10, 0, 2 * Math.PI);\n      ctx.current.fill();\n      ctx.current.lineWidth = 20;\n      ctx.current.beginPath();\n      ctx.current.moveTo(old.x, old.y);\n      ctx.current.lineTo(x, y);\n      ctx.current.stroke();\n      old = {\n        x: x,\n        y: y\n      };\n    }\n  } // ------------------\n  // function startDrawing(e) {\n  //   ctx.current.lineJoin = 'round'\n  //   ctx.current.lineCap = 'round'\n  //   ctx.current.lineWidth = 20\n  //   // ctx.current.strokeStyle = \"#3AAFA9\"\n  //   ctx.current.strokeStyle = \"white\"\n  //   ctx.current.beginPath();\n  //   // actual coordinates\n  //   ctx.current.moveTo(\n  //     e.clientX - canvasRef.current.offsetLeft,\n  //     e.pageY - canvasRef.current.offsetTop\n  //   )\n  // }\n\n\n  function stopDrawing() {\n    ctx.current.closePath(); // setDrawing(false)\n  }\n\n  function handleClick() {// setDrawing(true)\n    // console.log(props.title)\n  }\n\n  function download() {\n    const dataURI = canvasRef.current.toDataURL();\n    console.log(dataURI);\n    converted.current.src = dataURI; // canvasRef.current.download = \"mypainting.png\";\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: download,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \" download \"), React.createElement(\"img\", {\n    ref: converted,\n    src: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 415,\n    height: 415 // onMouseDown={startDrawing}\n    ,\n    onMouseOver: startDrawing // onMouseUp={stopDrawing}\n    ,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","Canvas","props","drawing","setDrawing","restart","setRestart","canvasRef","ctx","converted","current","getContext","handleClear","ifStart","ifFinished","clearRect","handleMouseMove","e","isPress","x","offsetX","y","offsetY","globalCompositeOperation","beginPath","arc","Math","PI","fill","lineWidth","moveTo","old","lineTo","stroke","stopDrawing","closePath","handleClick","download","dataURI","toDataURL","console","log","src","startDrawing"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [restart, setRestart] = useState(true)\n  \n  const canvasRef = useRef()\n  const ctx = useRef()\n  const converted = useRef()\n  \n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n    // ctx.current.fillStyle = \"#17252A\"\n    // ctx.current.fillRect(0, 0, 415, 415)\n\n    // ctx.current.strokeStyle = \"#3AAFA9\"\n    // ctx.current.lineWidth = 20\n    // ctx.current.strokeRect(0, 0, 415, 415)\n   \n  }, [])\n\n  // Reset if reset/start is clicked in parent.\n  useEffect(() => {\n    handleClear()\n    if(props.ifStart === \"reset\"){\n      setDrawing(true)\n    } else {\n      setDrawing(false)\n    }\n  }, [props.ifStart])\n\n  // Stop when time is 0\n  useEffect(() => {\n    if(props.ifFinished){\n      setDrawing(false)\n    } \n  }, [props.ifFinished])\n\n   //clear function\n  function handleClear() {\n     ctx.current.clearRect(0, 0, 415, 415)\n  }\n\n  // draw when moving mouse if draw = true\n  // function handleMouseMove(e) {\n  //   const coords = [\n  //     e.clientX - canvasRef.current.offsetLeft,\n  //     e.pageY - canvasRef.current.offsetTop\n  //   ]\n  //   if (drawing) { \n  //     ctx.current.lineTo(...coords)\n  //     ctx.current.stroke()\n  //   }\n  // }\n  // --------------------\n  function handleMouseMove(e) {\n    if (isPress) {\n      var x = e.offsetX;\n      var y = e.offsetY;\n      ctx.current.globalCompositeOperation = 'destination-out';\n  \n      ctx.current.beginPath();\n      ctx.current.arc(x, y, 10, 0, 2 * Math.PI);\n      ctx.current.fill();\n  \n      ctx.current.lineWidth = 20;\n      ctx.current.beginPath();\n      ctx.current.moveTo(old.x, old.y);\n      ctx.current.lineTo(x, y);\n      ctx.current.stroke();\n  \n      old = {x: x, y: y};\n  \n    }\n  }\n  // ------------------\n\n  // function startDrawing(e) {\n  //   ctx.current.lineJoin = 'round'\n  //   ctx.current.lineCap = 'round'\n  //   ctx.current.lineWidth = 20\n  //   // ctx.current.strokeStyle = \"#3AAFA9\"\n  //   ctx.current.strokeStyle = \"white\"\n  //   ctx.current.beginPath();\n  //   // actual coordinates\n  //   ctx.current.moveTo(\n  //     e.clientX - canvasRef.current.offsetLeft,\n  //     e.pageY - canvasRef.current.offsetTop\n  //   )\n  // }\n\n  function stopDrawing() {\n    ctx.current.closePath()\n    // setDrawing(false)\n  }\n  function handleClick(){\n    // setDrawing(true)\n    // console.log(props.title)\n  }\n\n  function download(){\n    const dataURI = canvasRef.current.toDataURL();\n    console.log(dataURI)\n    converted.current.src = dataURI\n  \n    // canvasRef.current.download = \"mypainting.png\";\n  }\n  return (\n    <div>\n      <button onClick ={download}> download </button>\n      <img ref={converted} src=\"\" />\n      <div className =\"canvas\">\n        <canvas\n        ref={canvasRef}\n        width={415}\n        height={415}\n        // onMouseDown={startDrawing}\n        onMouseOver={startDrawing}\n        // onMouseUp={stopDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n        onClick={handleClick}\n        />\n      </div>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}