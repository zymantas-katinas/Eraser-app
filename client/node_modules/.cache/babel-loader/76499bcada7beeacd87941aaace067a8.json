{"ast":null,"code":"var _jsxFileName = \"/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport useWindowSize from './WindowSize';\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n  }, []);\n  const [windowWidth, windowHeight] = useWindowSize(() => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  });\n\n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.clientY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n\n    if (props.handleMouseMove) {\n      props.handleMouseMove(...coords);\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 10;\n    ctx.current.strokeStyle = props.color;\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.clientY - canvasRef.current.offsetTop);\n    setDrawing(true);\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath();\n    setDrawing(false);\n  }\n\n  return React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: props.width || width,\n    height: props.height || height,\n    onMouseDown: startDrawing,\n    onMouseUp: stopDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/zymka/Desktop/web projects/react playground/my-app/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","useWindowSize","Canvas","props","drawing","setDrawing","width","setWidth","window","innerWidth","height","setHeight","innerHeight","canvasRef","ctx","current","getContext","windowWidth","windowHeight","handleMouseMove","e","coords","clientX","offsetLeft","clientY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","strokeStyle","color","beginPath","moveTo","stopDrawing","closePath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,aAAP,MAA0B,cAA1B;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACU,MAAM,CAACC,UAAR,CAAlC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAACU,MAAM,CAACI,WAAR,CAApC;AAEA,QAAMC,SAAS,GAAGb,MAAM,EAAxB;AACA,QAAMc,GAAG,GAAGd,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,GAAG,CAACC,OAAJ,GAAcF,SAAS,CAACE,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAd;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAM,CAACC,WAAD,EAAcC,YAAd,IAA8BjB,aAAa,CAAC,MAAM;AACtDM,IAAAA,QAAQ,CAACC,MAAM,CAACC,UAAR,CAAR;AACAE,IAAAA,SAAS,CAACH,MAAM,CAACI,WAAR,CAAT;AACD,GAHgD,CAAjD;;AAKA,WAASO,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B;AACA,UAAMC,MAAM,GAAG,CACbD,CAAC,CAACE,OAAF,GAAYT,SAAS,CAACE,OAAV,CAAkBQ,UADjB,EAEbH,CAAC,CAACI,OAAF,GAAYX,SAAS,CAACE,OAAV,CAAkBU,SAFjB,CAAf;;AAIA,QAAIrB,OAAJ,EAAa;AACXU,MAAAA,GAAG,CAACC,OAAJ,CAAYW,MAAZ,CAAmB,GAAGL,MAAtB;AACAP,MAAAA,GAAG,CAACC,OAAJ,CAAYY,MAAZ;AACD;;AACD,QAAIxB,KAAK,CAACgB,eAAV,EAA2B;AACvBhB,MAAAA,KAAK,CAACgB,eAAN,CAAsB,GAAGE,MAAzB;AACH;AACF;;AACD,WAASO,YAAT,CAAsBR,CAAtB,EAAyB;AACvBN,IAAAA,GAAG,CAACC,OAAJ,CAAYc,QAAZ,GAAuB,OAAvB;AACAf,IAAAA,GAAG,CAACC,OAAJ,CAAYe,OAAZ,GAAsB,OAAtB;AACAhB,IAAAA,GAAG,CAACC,OAAJ,CAAYgB,SAAZ,GAAwB,EAAxB;AACAjB,IAAAA,GAAG,CAACC,OAAJ,CAAYiB,WAAZ,GAA0B7B,KAAK,CAAC8B,KAAhC;AACAnB,IAAAA,GAAG,CAACC,OAAJ,CAAYmB,SAAZ,GALuB,CAMvB;;AACApB,IAAAA,GAAG,CAACC,OAAJ,CAAYoB,MAAZ,CACEf,CAAC,CAACE,OAAF,GAAYT,SAAS,CAACE,OAAV,CAAkBQ,UADhC,EAEEH,CAAC,CAACI,OAAF,GAAYX,SAAS,CAACE,OAAV,CAAkBU,SAFhC;AAIApB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACD,WAAS+B,WAAT,GAAuB;AACrBtB,IAAAA,GAAG,CAACC,OAAJ,CAAYsB,SAAZ;AACAhC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAED,SAAO;AACL,IAAA,GAAG,EAAEQ,SADA;AAEL,IAAA,KAAK,EAAEV,KAAK,CAACG,KAAN,IAAeA,KAFjB;AAGL,IAAA,MAAM,EAAEH,KAAK,CAACO,MAAN,IAAgBA,MAHnB;AAIL,IAAA,WAAW,EAAEkB,YAJR;AAKL,IAAA,SAAS,EAAEQ,WALN;AAML,IAAA,UAAU,EAAEA,WANP;AAOL,IAAA,WAAW,EAAEjB,eAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AASD","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport useWindowSize from './WindowSize'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [width, setWidth] = useState(window.innerWidth)\n  const [height, setHeight] = useState(window.innerHeight)\n  \n  const canvasRef = useRef()\n  const ctx = useRef()\n  \n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n  }, [])\n  \n  const [windowWidth, windowHeight] = useWindowSize(() => {\n    setWidth(window.innerWidth)\n    setHeight(window.innerHeight)\n  })\n  \n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n    if (props.handleMouseMove) {\n        props.handleMouseMove(...coords)\n    }\n  }\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 10\n    ctx.current.strokeStyle = props.color\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    )\n    setDrawing(true)\n  }\n  function stopDrawing() {\n    ctx.current.closePath()\n    setDrawing(false)\n  }\n  \n  return <canvas\n    ref={canvasRef}\n    width={props.width || width}\n    height={props.height || height}\n    onMouseDown={startDrawing}\n    onMouseUp={stopDrawing}\n    onMouseOut={stopDrawing}\n    onMouseMove={handleMouseMove}\n  />\n}"]},"metadata":{},"sourceType":"module"}